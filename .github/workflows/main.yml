# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
  pull_request:
    types:
      - opened
      - edited
    branches: 
      - main
      - 'dev/*' # Pull requests to development branches, 
      - 'feat/**' # Pull requests to feature branches, ** is that can have multiple levels of subdirectories
      - 'dev-*' # pull requests to branches that start with dev-
    

jobs:
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
        #Use cache to store the dependencies and minimize the time to install them
      - name: Cache the dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # hashFiles: Use the hashFiles function to hash the contents of package-lock.json, 
          key: deps-node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    strategy:
      matrix:
        # node-version: [18.x, 20.x, 22.x]
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
      
    - name: Cache the dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        # hashFiles: Use the hashFiles function to hash the contents of package-lock.json, 
        key: deps-node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

    - run: npm ci
    - run: npm run build --if-present
    - name: execute tests
      run: npm test
    - name: lint
      run: npm run lint
    - name: publish the js file name
      id: publish
      run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' \;
    

  # Using artifact to store the build file for deployment
  # only one artifact with the same name can be stored in the same workflow
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: download the artifact
        uses: actions/download-artifact@v4
        with:
        #dist-files is the name of the artifact
          name: dist-files
    
      - name: Print the js file name
        run: echo ${{ needs.build.outputs.script-file }}

      - name: deployment
        run: |
          echo "Deploying the artifact"

  
